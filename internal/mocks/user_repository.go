// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/cecepsprd/starworks-test/internal/model"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *UserRepository) BeginTx(ctx context.Context) *sql.Tx {
	ret := _m.Called(ctx)

	var r0 *sql.Tx
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	return r0
}

// Create provides a mock function with given fields: ctx, tx, user
func (_m *UserRepository) Create(ctx context.Context, tx *sql.Tx, user model.User) (int64, error) {
	ret := _m.Called(ctx, tx, user)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.User) (int64, error)); ok {
		return rf(ctx, tx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.User) int64); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.User) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserRegistered provides a mock function with given fields: ctx, username, email
func (_m *UserRepository) IsUserRegistered(ctx context.Context, username string, email string) (bool, error) {
	ret := _m.Called(ctx, username, email)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, username, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, username, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadByUsernameOrEmail provides a mock function with given fields: ctx, username, email
func (_m *UserRepository) ReadByUsernameOrEmail(ctx context.Context, username string, email string) (*model.User, error) {
	ret := _m.Called(ctx, username, email)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return rf(ctx, username, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, username, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadLoginHistory provides a mock function with given fields: ctx, req
func (_m *UserRepository) ReadLoginHistory(ctx context.Context, req model.LoginHistory) (model.LoginHistory, error) {
	ret := _m.Called(ctx, req)

	var r0 model.LoginHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginHistory) (model.LoginHistory, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginHistory) model.LoginHistory); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.LoginHistory)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginHistory) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoginHistory provides a mock function with given fields: ctx, req
func (_m *UserRepository) UpdateLoginHistory(ctx context.Context, req model.LoginHistory) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginHistory) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteLoginHistory provides a mock function with given fields: ctx, req
func (_m *UserRepository) WriteLoginHistory(ctx context.Context, req model.LoginHistory) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginHistory) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
